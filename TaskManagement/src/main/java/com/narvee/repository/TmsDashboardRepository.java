package com.narvee.repository;

import java.io.Serializable;
import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.narvee.dto.ProjectDropDownDTO;
import com.narvee.dto.TmsTaskCountData;
import com.narvee.entity.TmsProject;

@Repository
public interface TmsDashboardRepository extends JpaRepository<TmsProject, Long> {

	@Query(value= " WITH statuses AS ( SELECT 'In Progress' AS status	UNION ALL SELECT 'Completed' UNION ALL SELECT 'Blocked' UNION ALL SELECT 'OPEN'  UNION ALL SELECT 'OVERDUE'), "
		
			+ "	task_counts AS (SELECT t.status, COUNT(*) AS count FROM tms_task t JOIN tms_project p ON t.pid = p.pid WHERE t.status IN ('In Progress', 'Completed', 'Blocked', 'OPEN', 'OVERDUE') "
			+ "		GROUP BY t.status ),"
	
			+ "	sub_task_counts AS ( SELECT ts.status, COUNT(*) AS count FROM tms_sub_task ts JOIN tms_task t ON ts.taskid = t.taskid JOIN tms_project p ON t.pid = p.pid "
			+ "		WHERE ts.status IN ('In Progress', 'Completed', 'Blocked', 'OPEN', 'OVERDUE' ) GROUP BY ts.status ),"

			+ "	combined_counts AS ( SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count FROM statuses s LEFT JOIN task_counts tc ON s.status = tc.status 	UNION ALL "
			
			+ "		SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count FROM statuses s "
			+ "		LEFT JOIN sub_task_counts stc ON s.status = stc.status ),"

			+ "	total_counts AS ( SELECT 'Total' AS type, s.status, COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count FROM statuses s LEFT JOIN task_counts tc ON s.status = tc.status "
			+ "		LEFT JOIN sub_task_counts stc ON s.status = stc.status )"
			
			+ "	SELECT * FROM combined_counts UNION ALL 	SELECT * FROM total_counts "
			+ "	ORDER BY "
			+ "	  CASE status "
			+ "		WHEN 'In Progress' THEN 1 "
			+ "		WHEN 'Completed' THEN 2 "
			+ "		WHEN 'OPEN' THEN 3 "
			+ "		WHEN 'Blocked' THEN 4 "
			+ "        WHEN 'OVERDUE' THEN 5 "
			+ "		ELSE 6 "
			+ "	  END, "
			+ "	  CASE type  "
			+ "		WHEN 'Task' THEN 1 "
			+ "		WHEN 'Sub Task' THEN 2 "
			+ "		WHEN 'Total' THEN 3 "
			+ "		ELSE 4 "
			+ "	  END",nativeQuery = true)
	public List<TmsTaskCountData> getAllCount();  // get All task 
	
	
	@Query(value = " WITH statuses AS (  "
			+ "		 SELECT 'In Progress' AS status  "
			+ "			     UNION ALL SELECT 'To be Tested' "
			+ "			     UNION ALL SELECT 'Blocked'  "
			+ "			     UNION ALL SELECT 'Open'  "
			+ "			     UNION ALL SELECT 'Overdue' "
			+ "              UNION ALL SELECT 'On Hold' "
			+ "              UNION ALL SELECT 'In Review' "
			+ "              UNION ALL SELECT 'Closed' "	
			+ "			 ), " 
		
			+ "			 task_counts AS (  "
			+ "			     SELECT t.status, COUNT(*) AS count "
			+ "			     FROM tms_task t "
			+ "			     JOIN tms_project p ON t.pid = p.pid  "
			+ "			     WHERE  p.admin_id = :adminId  AND  t.status IN  ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "			     GROUP BY t.status  "
			+ "			 ),  "
			
			+ "			 sub_task_counts AS (   "
			+ "			     SELECT ts.status, COUNT(*) AS count   "
			+ "			     FROM tms_sub_task ts   "
			+ "			     JOIN tms_task t ON ts.taskid = t.taskid   "
			+ "			     JOIN tms_project p ON t.pid = p.pid   "
			+ "			     WHERE   p.admin_id= :adminId AND  ts.status IN  ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed')  "
			+ "			     GROUP BY ts.status   "
			+ "			 ),  "
			
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count  "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN task_counts tc ON s.status = tc.status   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.status = stc.status "
			+ "			 ),   "

			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.status,   "
			+ "			            COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN task_counts tc ON s.status = tc.status "
			+ "			     LEFT JOIN sub_task_counts stc ON s.status = stc.status  "
			+ "			 )   "
			
			+ "			 SELECT * FROM combined_counts  "
			+ "			 UNION ALL "
			+ "			 SELECT * FROM total_counts "
			+ "			 ORDER BY "
			+ "			   CASE status  "
			+ "			     WHEN 'In Progress' THEN 1  "
			+ "			     WHEN 'To be Tested' THEN 2 "
			+ "			     WHEN 'Blocked' THEN 3   "
			+ "			     WHEN 'Open' THEN 4   "
			+ "			     WHEN 'Overdue' THEN 5 "
			+ "              WHEN 'On Hold' THEN 6 "
			+ "              WHEN 'In Review' THEN 7 "
			+ "              WHEN 'Closed' THEN 8 "
			+ "			     ELSE 9 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END ",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByadminId(Long adminId);   // get All task By Admin Id
	
	@Query(value = " WITH statuses AS ( "
			+ "    SELECT 'In Progress' AS status "
			+ "    UNION ALL SELECT 'To be Tested' "
			+ "    UNION ALL SELECT 'Blocked' "
			+ "    UNION ALL SELECT 'Open' "
			+ "    UNION ALL SELECT 'Overdue' "
			+ "    UNION ALL SELECT 'On Hold' "
			+ "    UNION ALL SELECT 'In Review' "
			+ "    UNION ALL SELECT 'Closed' "
			+ "), "
			+ "task_counts AS ( "
			+ "    SELECT t.status, COUNT(*) AS count "
			+ "    FROM tms_task t "
			+ "    JOIN tms_project p ON t.pid = p.pid "
			+ "    LEFT JOIN tms_task_users ttu ON t.taskid = ttu.taskid "
			+ "    LEFT JOIN tms_assigned_users tau ON tau.assignid = ttu.assignedto "
			+ "    WHERE t.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "      AND ( "
			+ "          (p.addedby = :userId AND (p.addedby = :userId OR tau.tms_user_id = :userId))   "
			+ "          OR (p.addedby <> :userId AND tau.tms_user_id = :userId)                         "
			+ "      ) "
			+ "    GROUP BY t.status "
			+ "), "
			+ "sub_task_counts AS ( "
			+ "    SELECT ts.status, COUNT(*) AS count "
			+ "FROM tms_sub_task ts "
			+ "JOIN tms_task t ON ts.taskid = t.taskid "
			+ "JOIN tms_project p ON t.pid = p.pid "
			+ "LEFT JOIN tms_assigned_users tau ON tau.subtaskid = ts.subtaskid "
			+ "WHERE ts.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "  AND ( "
			+ "      (p.addedby = :userId AND (p.addedby = :userId OR tau.tms_user_id = :userId)) "
			+ "      OR (p.addedby <> :userId AND tau.tms_user_id = :userId) "
			+ "  ) "
			+ "GROUP BY ts.status "
			+ "), "
			+ "combined_counts AS ( "
			+ "    SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count "
			+ "    FROM statuses s "
			+ "    LEFT JOIN task_counts tc ON s.status = tc.status "
			+ " "
			+ "    UNION ALL "
			+ " "
			+ "    SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count "
			+ "    FROM statuses s "
			+ "    LEFT JOIN sub_task_counts stc ON s.status = stc.status "
			+ "), "
			+ "total_counts AS ( "
			+ "    SELECT 'Total' AS type, s.status, "
			+ "           COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count "
			+ "    FROM statuses s "
			+ "    LEFT JOIN task_counts tc ON s.status = tc.status "
			+ "    LEFT JOIN sub_task_counts stc ON s.status = stc.status "
			+ ") "
			+ " "
			+ "SELECT * FROM combined_counts "
			+ "UNION ALL "
			+ "SELECT * FROM total_counts "
			+ "ORDER BY "
			+ "  CASE status "
			+ "    WHEN 'In Progress' THEN 1 "
			+ "    WHEN 'To be Tested' THEN 2 "
			+ "    WHEN 'Blocked' THEN 3 "
			+ "    WHEN 'Open' THEN 4 "
			+ "    WHEN 'Overdue' THEN 5 "
			+ "    WHEN 'On Hold' THEN 6 "
			+ "    WHEN 'In Review' THEN 7 "
			+ "    WHEN 'Closed' THEN 8 "
			+ "    ELSE 9 "
			+ "  END, "
			+ "  CASE type "
			+ "    WHEN 'Task' THEN 1 "
			+ "    WHEN 'Sub Task' THEN 2 "
			+ "    WHEN 'Total' THEN 3 "
			+ "    ELSE 4 "
			+ "  END "
			+ " ",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByUserId(Long userId);  // get All task By userId 
	
	@Query(value = "WITH statuses AS (   "
			+ "				SELECT 'In Progress' AS status   "
			+ "			     UNION ALL SELECT 'To be Tested'   "
			+ "			     UNION ALL SELECT 'Blocked'   "
			+ "			     UNION ALL SELECT 'Open'   "
			+ "			     UNION ALL SELECT 'Overdue' "
			+ "              UNION ALL SELECT 'On Hold' "
			+ "              UNION ALL SELECT 'In Review' "
			+ "              UNION ALL SELECT 'Closed' "
			+ "			 ), "
	
			+ "			 task_counts AS (   "
			+ "			     SELECT t.status, COUNT(*) AS count   "
			+ "			     FROM tms_task t   "
			+ "			     JOIN tms_project p ON t.pid = p.pid   "
			+ "			     WHERE  p.admin_id = :UserId AND  p.pid = :pid And  t.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed')  "
			+ "			     GROUP BY t.status   "
			+ "			 ),   "
	
			+ "			 sub_task_counts AS (   "
			+ "			     SELECT ts.status, COUNT(*) AS count   "
			+ "			     FROM tms_sub_task ts   "
			+ "			     JOIN tms_task t ON ts.taskid = t.taskid   "
			+ "			     JOIN tms_project p ON t.pid = p.pid   "
			+ "			     WHERE   p.admin_id = :UserId AND p.pid = :pid AND  ts.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed')  "
			+ "			     GROUP BY ts.status   "
			+ "			 ),   "
	
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN task_counts tc ON s.status = tc.status   "
			+ "			     UNION ALL   "
			+ "			     SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.status = stc.status   "
			+ "			 ),   "
	
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.status,   "
			+ "			            COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN task_counts tc ON s.status = tc.status   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.status = stc.status   "
			+ "			 )   "

			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE status   "
			+ "			     WHEN 'In Progress' THEN 1   "
			+ "			     WHEN 'To be Tested' THEN 2   "
			+ "			     WHEN 'Blocked' THEN 3   "
			+ "			     WHEN 'Open' THEN 4   "
			+ "			     WHEN 'Overdue' THEN 5 "
			+ "              WHEN 'On Hold' THEN 6 "
			+ "              WHEN 'In Review' THEN 7 "
			+ "              WHEN 'Closed' THEN 8 "
			+ "			     ELSE 9 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END ",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByPidAndAdminId(Long pid,Long UserId); // get All task and subtask count By pid and admin id 
	
	@Query(value = "WITH statuses AS (   "
			+ "				SELECT 'In Progress' AS status   "
			+ "			     UNION ALL SELECT 'To be Tested'   "
			+ "			     UNION ALL SELECT 'Blocked'   "
			+ "			     UNION ALL SELECT 'Open'   "
			+ "			     UNION ALL SELECT 'Overdue' "
			+ "              UNION ALL SELECT 'On Hold' "
			+ "              UNION ALL SELECT 'In Review' "
			+ "              UNION ALL SELECT 'Closed' "
			+ "			 ),"
			+ " "
			+ "      task_counts AS ( "
			+ "           SELECT t.status, COUNT(*) AS count "
			+ "           FROM tms_task t "
			+ "           JOIN tms_project p ON t.pid = p.pid "
			+ "           LEFT JOIN tms_task_users ttu ON t.taskid = ttu.taskid "
			+ "           LEFT JOIN tms_assigned_users tau ON tau.assignid = ttu.assignedto "
			+ "           WHERE t.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "           AND ( "
			+ "                 (p.addedby = :UserId AND (p.addedby = :UserId  OR tau.tms_user_id = :UserId))   "
			+ "                 OR (p.addedby <> :UserId  AND tau.tms_user_id = :UserId)                         "
			+ "               ) and p.pid = :pid "
			+ "          GROUP BY t.status "
			+ "          ), "
			+ "           "
			+ "     sub_task_counts AS ( "
			+ "         SELECT ts.status, COUNT(*) AS count "
			+ "         FROM tms_sub_task ts "
			+ "         JOIN tms_task t ON ts.taskid = t.taskid "
			+ "         JOIN tms_project p ON t.pid = p.pid "
			+ "         LEFT JOIN tms_assigned_users tau ON tau.subtaskid = ts.subtaskid "
			+ "         WHERE ts.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "          AND ( "
			+ "                    (p.addedby = :UserId AND (p.addedby = :UserId OR tau.tms_user_id = :UserId)) "
			+ "                    OR (p.addedby <> :UserId  AND tau.tms_user_id = :UserId ) "
			+ "              ) and p.pid = :pid "
			+ "        GROUP BY ts.status "
			+ "        ),"
	
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN task_counts tc ON s.status = tc.status   "
			+ "			     UNION ALL   "
			+ "			     SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.status = stc.status   "
			+ "			 ),   "
	
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.status,   "
			+ "			            COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM statuses s   "
			+ "			     LEFT JOIN task_counts tc ON s.status = tc.status   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.status = stc.status   "
			+ "			 )   "

			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE status   "
			+ "			     WHEN 'In Progress' THEN 1   "
			+ "			     WHEN 'To be Tested' THEN 2   "
			+ "			     WHEN 'Blocked' THEN 3   "
			+ "			     WHEN 'Open' THEN 4   "
			+ "			     WHEN 'Overdue' THEN 5 "
			+ "              WHEN 'On Hold' THEN 6 "
			+ "              WHEN 'In Review' THEN 7 "
			+ "              WHEN 'Closed' THEN 8 "
			+ "			     ELSE 9 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END ",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByPidAndUserId(Long pid,Long UserId); // get All task and subtask count By pid and user id 
	
	
	@Query(value = "WITH statuses AS (  "
			+ "			     SELECT 'In Progress' AS status   "
			+ "			     UNION ALL SELECT 'To be Tested'   "
			+ "			     UNION ALL SELECT 'Blocked'   "
			+ "			     UNION ALL SELECT 'Open'   "
			+ "			     UNION ALL SELECT 'Overdue' "
			+ "              UNION ALL SELECT 'On Hold' "
			+ "              UNION ALL SELECT 'In Review' "
			+ "              UNION ALL SELECT 'Closed' "
			+ "			        ), "
			+ " "
			+ "			        task_counts AS (    "
			+ "			            SELECT t.status, COUNT(*) AS count    "
			+ "			            FROM tms_task t    "
			+ "			            JOIN tms_project p ON t.pid = p.pid   "
			+ "                    WHERE (:pid IS NULL OR p.pid = :pid) "
		    + "                    AND p.admin_id = :userId  AND  t.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed')"
			+ "			              AND (    "
			+ "			                ( :interval = 'daily' AND DATE(t.updateddate) = CURDATE()) OR    "
			+ "			                ( :interval = 'weekly' AND t.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :interval = 'monthly' AND t.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR   "
			+ "                         ( :interval = 'yearly' AND t.updateddate >= CURDATE() - INTERVAL 1 YEAR) OR  "
			+ "			                ( :interval = 'all')    "
			+ "			              )    "
			+ "			            GROUP BY t.status    "
			+ "			        ),    "
			+ "			        sub_task_counts AS (    "
			+ "			            SELECT ts.status, COUNT(*) AS count    "
			+ "			            FROM tms_sub_task ts    "
			+ "			            JOIN tms_task t ON ts.taskid = t.taskid    "
			+ "			            JOIN tms_project p ON t.pid = p.pid  "
			+ "			             "
			+ "			            WHERE (:pid IS NULL OR p.pid = :pid) "
			+ "			              AND p.admin_id = :userId  AND   t.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed')"
			+ "			              AND (    "
			+ "			                ( :interval = 'daily' AND DATE(ts.updateddate) = CURDATE()) OR    "
			+ "			                ( :interval = 'weekly' AND ts.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :interval = 'monthly' AND ts.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR  "
			+ "                         ( :interval = 'yearly' AND ts.updateddate >= CURDATE() - INTERVAL 1 YEAR) OR  "
			+ "			                ( :interval = 'all')    "
			+ "			              )    "
			+ "			            GROUP BY ts.status    "
			+ "			        ),    "
			+ "			        combined_counts AS (    "
			+ "			            SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count    "
			+ "			            FROM statuses s    "
			+ "			            LEFT JOIN task_counts tc ON s.status = tc.status    "
			+ "			            UNION ALL    "
			+ "			            SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count    "
			+ "			            FROM statuses s    "
			+ "			            LEFT JOIN sub_task_counts stc ON s.status = stc.status    "
			+ "			        ),    "
			+ "			        total_counts AS (    "
			+ "			            SELECT 'Total' AS type, s.status,    "
			+ "			                   COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count    "
			+ "			            FROM statuses s    "
			+ "			            LEFT JOIN task_counts tc ON s.status = tc.status    "
			+ "			            LEFT JOIN sub_task_counts stc ON s.status = stc.status    "
			+ "			        )    "
			+ "			        SELECT * FROM combined_counts    "
			+ "			        UNION ALL    "
			+ "			        SELECT * FROM total_counts    "
			+ "			        ORDER BY     "
			+ "			          FIELD(status, 'In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed'),    "
			+ "			          FIELD(type, 'Task', 'Sub Task', 'Total')",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByPidAndAdminIdAndTime(Long pid ,Long userId,String interval);
	
	
	@Query(value = "WITH statuses AS (  "
			+ "			     SELECT 'In Progress' AS status   "
			+ "			     UNION ALL SELECT 'To be Tested'   "
			+ "			     UNION ALL SELECT 'Blocked'   "
			+ "			     UNION ALL SELECT 'Open'   "
			+ "			     UNION ALL SELECT 'Overdue' "
			+ "              UNION ALL SELECT 'On Hold' "
			+ "              UNION ALL SELECT 'In Review' "
			+ "              UNION ALL SELECT 'Closed' "
			+ "			        ),"
			+ " "
			+ "                task_counts AS ( "
			+ "                 SELECT t.status, COUNT(*) AS count "
			+ "                 FROM tms_task t "
			+ "                 JOIN tms_project p ON t.pid = p.pid "
			+ "                 LEFT JOIN tms_task_users ttu ON t.taskid = ttu.taskid "
			+ "                 LEFT JOIN tms_assigned_users tau ON tau.assignid = ttu.assignedto "
			+ "                 WHERE t.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "                   AND ( "
			+ "                         (p.addedby = :userId  AND (p.addedby = :userId  OR tau.tms_user_id = :userId ))   "
			+ "                         OR (p.addedby <> :userId  AND tau.tms_user_id = :userId)                         "
			+ "                       ) and (:pid IS NULL OR p.pid = :pid) "
			+ "			          AND (    "
			+ "			                ( :interval = 'daily' AND DATE(t.updateddate) = CURDATE()) OR    "
			+ "			                ( :interval = 'weekly' AND t.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :interval = 'monthly' AND t.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR    "
			+ "			                ( :interval = 'all')    "
			+ "			              )    "
			+ "			          GROUP BY t.status    "
			+ "			        ),  "
			+ ""
			+ "  "
			+ "			      sub_task_counts AS ( "
			+ "                 SELECT ts.status, COUNT(*) AS count "
			+ "                 FROM tms_sub_task ts "
			+ "                 JOIN tms_task t ON ts.taskid = t.taskid "
			+ "                 JOIN tms_project p ON t.pid = p.pid "
			+ "                 LEFT JOIN tms_assigned_users tau ON tau.subtaskid = ts.subtaskid "
			+ "                 WHERE ts.status IN ('In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed') "
			+ "                   AND ( "
			+ "                           (p.addedby = :userId AND (p.addedby = :userId OR tau.tms_user_id = :userId)) "
			+ "                           OR (p.addedby <> :userId AND tau.tms_user_id = :userId) "
			+ "                       )   and (:pid IS NULL OR p.pid = :pid) "
			+ "			          AND (    "
			+ "			                ( :interval = 'daily' AND DATE(ts.updateddate) = CURDATE()) OR    "
			+ "			                ( :interval = 'weekly' AND ts.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :interval = 'monthly' AND ts.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR    "
			+ "			                ( :interval = 'all')    "
			+ "			              )    "
			+ "			           GROUP BY ts.status    "
			+ "			        ),   "
			+ " "
			+ "			        combined_counts AS (    "
			+ "			            SELECT 'Task' AS type, s.status, COALESCE(tc.count, 0) AS count    "
			+ "			            FROM statuses s    "
			+ "			            LEFT JOIN task_counts tc ON s.status = tc.status    "
			+ "			            UNION ALL    "
			+ "			            SELECT 'Sub Task' AS type, s.status, COALESCE(stc.count, 0) AS count    "
			+ "			            FROM statuses s    "
			+ "			            LEFT JOIN sub_task_counts stc ON s.status = stc.status    "
			+ "			        ),    "
			+ "			        total_counts AS (    "
			+ "			            SELECT 'Total' AS type, s.status,    "
			+ "			                   COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count    "
			+ "			            FROM statuses s    "
			+ "			            LEFT JOIN task_counts tc ON s.status = tc.status    "
			+ "			            LEFT JOIN sub_task_counts stc ON s.status = stc.status    "
			+ "			        )    "
			+ "			        SELECT * FROM combined_counts    "
			+ "			        UNION ALL    "
			+ "			        SELECT * FROM total_counts    "
			+ "			        ORDER BY     "
			+ "			          FIELD(status, 'In Progress', 'To be Tested', 'Blocked', 'Open', 'Overdue','On Hold','In Review','Closed'),    "
			+ "			          FIELD(type, 'Task', 'Sub Task', 'Total')",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByPidAndUserIdAndTime(Long pid ,Long userId,String interval);
	
	
	@Query(value = "SELECT DATE_FORMAT(updateddate, '%Y-%m') AS month, COUNT(*) AS count  "
			+ "FROM  tms_task WHERE  status = :Status AND updateddate IS NOT NULL  GROUP BY  month "
			+ "ORDER BY month ",nativeQuery = true)
	public List<TmsTaskCountData> getTaskCountByMonth(String Status);
	
	@Query(value = "select tms.first_name ,"
			+ "tms.position AS position ,"
			+ " COUNT(tt.taskid) AS total_assigned_tasks, "
			+ " \r\n"
			+ "    COUNT(CASE WHEN tt.status = 'In Progress' THEN 1 END) AS inprogress_count, "
			+ "    COUNT(CASE WHEN tt.status = 'Open' THEN 1 END) AS open_count, "
			+ "    COUNT(CASE WHEN tt.status = 'On Hold' THEN 1 END) AS OnHold_count  ,   "
			+ "    COUNT(CASE WHEN tt.status = 'Blocked' THEN 1 END) AS Blocked_count  ,  "
			+ "    COUNT(CASE WHEN tt.status = 'To be Tested' THEN 1 END) AS ToBeTested_count ,   "
			+ "    COUNT(CASE WHEN tt.status = 'In Review' THEN 1 END) AS InReview_count , "
			+ "     COUNT(CASE WHEN tt.status = 'Closed' THEN 1 END) AS Closed_count , "
			+ "     COUNT(CASE WHEN tt.status = 'Overdue' THEN 1 END) AS Overdue_count "
			+ "from tms_task  tt join  tms_task_users tu on tt.taskid  = tu.taskid join  tms_assigned_users ttu  on tu.assignedto = ttu.assignid join tms_users  tms on tms.user_id = ttu.tms_user_id "
			+ "where  (tms.added_by = :adminId or tms .user_id =:adminId)    GROUP BY  "
			+ "    tms.first_name,tms.position",nativeQuery = true )
	public List<TmsTaskCountData> getUserTrackerByAdmin(Long adminId );
	
	@Query(value = "select tms.first_name ,"
			+ "tms.position AS position ,"
			+ " COUNT(tt.taskid) AS total_assigned_tasks, "
			+ " \r\n"
			+ "    COUNT(CASE WHEN tt.status = 'In Progress' THEN 1 END) AS inprogress_count, "
			+ "    COUNT(CASE WHEN tt.status = 'Open' THEN 1 END) AS open_count, "
			+ "    COUNT(CASE WHEN tt.status = 'On Hold' THEN 1 END) AS OnHold_count  ,   "
			+ "    COUNT(CASE WHEN tt.status = 'Blocked' THEN 1 END) AS Blocked_count  ,  "
			+ "    COUNT(CASE WHEN tt.status = 'To be Tested' THEN 1 END) AS ToBeTested_count ,   "
			+ "    COUNT(CASE WHEN tt.status = 'In Review' THEN 1 END) AS InReview_count , "
			+ "     COUNT(CASE WHEN tt.status = 'Closed' THEN 1 END) AS Closed_count , "
			+ "     COUNT(CASE WHEN tt.status = 'Overdue' THEN 1 END) AS Overdue_count "
			+ "from tms_task  tt join  tms_task_users tu on tt.taskid  = tu.taskid join  tms_assigned_users ttu  on tu.assignedto = ttu.assignid join tms_users  tms on tms.user_id = ttu.tms_user_id "
			+ "where  (tms.added_by = :adminId or tms .user_id =:adminId)   and tt.pid = :pid GROUP BY  "
			+ "    tms.first_name,tms.position ",nativeQuery = true )
	public List<TmsTaskCountData> getUserTrackerByAdminAndPid(Long adminId,Long pid );
	
	@Query(value = "SELECT  "
			+ "    tms.first_name AS firstName , "
			+ " tms.position AS position ,"
			
			+ "    COUNT(tt.taskid) AS totalAssignedTasks, "
		
			+ "    SUM(CASE WHEN tt.status = 'In Progress' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS inProgressTaskCount, "
			
			+ "    SUM(CASE WHEN tt.status = 'Open' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS openTaskCount, " 

			+ "    SUM(CASE WHEN tt.status = 'On Hold' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS onHoldTaskCount, "
		
			+ "    SUM(CASE WHEN tt.status = 'Blocked' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS blockedTaskCount, "

			+ "    SUM(CASE WHEN tt.status = 'To be Tested' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS toBeTestedTaskCount, "
			
			+ "    SUM(CASE WHEN tt.status = 'In Review' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS inReviewCount, "
		
			+ "    SUM(CASE WHEN tt.status = 'Closed' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS closedTaskCount, "

			+ "    SUM(CASE WHEN tt.status = 'Overdue' AND ( "
			+ "                    (:interval = 'DAILY' AND DATE(tt.updateddate) = CURDATE()) OR "
			+ "                    (:interval = 'WEEKLY' AND YEARWEEK(tt.updateddate, 1) = YEARWEEK(CURDATE(), 1)) OR "
			+ "                    (:interval = 'MONTHLY' AND YEAR(tt.updateddate) = YEAR(CURDATE()) AND MONTH(tt.updateddate) = MONTH(CURDATE())) "
			+ "                ) "
			+ "             THEN 1 ELSE 0 END) AS overDueTaskCount "
	
			+ "FROM tms_task tt "
			+ "JOIN tms_task_users tu ON tt.taskid = tu.taskid "
			+ "JOIN tms_assigned_users ttu ON tu.assignedto = ttu.assignid "
			+ "JOIN tms_users tms ON tms.user_id = ttu.tms_user_id "
			+ "WHERE (tms.added_by = :adminId OR tms.user_id = :adminId)  AND tt.pid = :pid "
			+ "GROUP BY tms.first_name,tms.position",nativeQuery = true)
	public  List<TmsTaskCountData> getUserTrackerByAdminAndPidAndTimeInterval(Long adminId, Long pid, String interval );
	
	@Query(value="select distinct p.pid, p.projectid ,p.projectname from tms_project p join tms_assigned_users au ON au.pid=p.pid where admin_id = :addedBy",nativeQuery =true)
	public List<ProjectDropDownDTO> projectDropDownWithAdmin(Long addedBy);
	

	@Query(value="select distinct p.pid, p.projectid ,p.projectname from tms_project p join tms_assigned_users au ON au.pid=p.pid where au.tms_user_id = :userId or p.addedby =:userId",nativeQuery =true)
	public List<ProjectDropDownDTO> projectDropDownWithOutAdmin(@Param("userId") Long userId);
	
	@Query(value = "select addedby from tms_project ",nativeQuery = true)
	public List<Long> getAddedBy();
	
	@Query(value = "select tr.rolename from tms_roles tr  join tms_users tu on tu.role_roleid = tr.roleid  where tu.user_id = :user_id",nativeQuery = true)
	public String roleName(Long user_id);
	
	
	@Query(value = "WITH priority AS (   "
			+ "			     SELECT 'High' AS Priority   "
			+ "			     UNION ALL SELECT 'Low'   "
			+ "			     UNION ALL SELECT 'Medium'   "
			+ "			     UNION ALL SELECT 'None'   "
			+ "			 ),   "
			+ "			 task_counts AS (   "
			+ "					   SELECT t.priority, COUNT(*) AS count  "
			+ "					   FROM tms_task t  "
			+ "					   JOIN tms_project p ON t.pid = p.pid   "
			+ "					   WHERE  p.admin_id = :adminId  AND  t.priority IN  ('High', 'Low', 'Medium', 'None')  "
			+ "					   GROUP BY t.priority   "
			+ "					 ),  "
			+ "			 "
			+ "			sub_task_counts AS (    "
			+ "				      SELECT ts.priority, COUNT(*) AS count    "
			+ "					  FROM tms_sub_task ts    "
			+ "					  JOIN tms_task t ON ts.taskid = t.taskid    "
			+ "					  JOIN tms_project p ON t.pid = p.pid    "
			+ "					  WHERE    p.admin_id = :adminId AND  ts.priority IN  ('High', 'Low', 'Medium', 'None')   "
			+ "					  GROUP BY ts.priority    "
			+ "				  ),   "
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.Priority, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.Priority, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 ),   "
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.Priority,   "
			+ "			     COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 )   "
			+ "			    "
			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE priority   "
			+ "			     WHEN 'High' THEN 1   "
			+ "			     WHEN 'Low' THEN 2   "
			+ "			     WHEN 'Medium' THEN 3   "
			+ "			     WHEN 'None' THEN 4   "
			+ "			     ELSE 5 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END",nativeQuery = true)
	public  List<TmsTaskCountData>   getPriorityByAdminId(Long adminId);
	
	@Query(value = "WITH priority AS (   "
			+ "			     SELECT 'High' AS Priority   "
			+ "			     UNION ALL SELECT 'Low'   "
			+ "			     UNION ALL SELECT 'Medium'   "
			+ "			     UNION ALL SELECT 'None'   "
			+ "			      "
			+ "			 ),   "
			+ "			 task_counts AS (   "
			+ "					     SELECT t.priority, COUNT(*) AS count  "
			+ "					     FROM tms_task t  "
			+ "					     JOIN tms_project p ON t.pid = p.pid "
			+ "					     LEFT JOIN tms_task_users ttu ON t.taskid = ttu.taskid "
			+ "                      LEFT JOIN tms_assigned_users tau ON tau.assignid = ttu.assignedto "
			+ "                      WHERE t.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "                      AND ( "
			+ "                           (p.addedby = :userId AND (p.addedby = :userId OR tau.tms_user_id = :userId))   "
			+ "                           OR (p.addedby <> :userId  AND tau.tms_user_id = :userId )                         "
			+ "                          ) "
			+ "					     GROUP BY t.priority   "
			+ "					 ),   "
			+ "			 "
			+ "					 sub_task_counts AS (    "
			+ "				             SELECT ts.priority, COUNT(*) AS count    "
			+ "					         FROM tms_sub_task ts    "
			+ "					         JOIN tms_task t ON ts.taskid = t.taskid "
			+ "                          JOIN tms_project p ON t.pid = p.pid "
			+ "                          LEFT JOIN tms_assigned_users tau ON tau.subtaskid = ts.subtaskid "
			+ "                          WHERE ts.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "                           AND ( "
			+ "                                 (p.addedby = :userId  AND (p.addedby = :userId  OR tau.tms_user_id = :userId )) "
			+ "                                 OR (p.addedby <> :userId  AND tau.tms_user_id = :userId ) "
			+ "                               ) "
			+ "					        GROUP BY ts.priority     "
			+ "						),   "
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.Priority, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.Priority, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 ),   "
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.Priority,   "
			+ "			     COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 )   "
			+ "			    "
			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE priority   "
			+ "			     WHEN 'High' THEN 1   "
			+ "			     WHEN 'Low' THEN 2   "
			+ "			     WHEN 'Medium' THEN 3   "
			+ "			     WHEN 'None' THEN 4   "
			+ "			     ELSE 5 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END;",nativeQuery = true)
	public  List<TmsTaskCountData>   getPriorityByUserId(Long userId);
	
	@Query(value = "WITH priority AS (   "
			+ "			     SELECT 'High' AS Priority   "
			+ "			     UNION ALL SELECT 'Low'   "
			+ "			     UNION ALL SELECT 'Medium'   "
			+ "			     UNION ALL SELECT 'None'   "
			+ "			      ),   "
			+ "	                task_counts AS (   "
			+ "					             SELECT t.priority, COUNT(*) AS count  "
			+ "						         FROM tms_task t  "
			+ "					             JOIN tms_project p ON t.pid = p.pid   "
			+ "						         WHERE  p.admin_id = :adminId   AND  p.pid = :pid AND  t.priority IN  ('High', 'Low', 'Medium', 'None')  "
			+ "					             GROUP BY t.priority   "
			+ "					           ),  "
			+ "					sub_task_counts AS (    "
			+ "				                 SELECT ts.priority, COUNT(*) AS count    "
			+ "					             FROM tms_sub_task ts    "
			+ "					             JOIN tms_task t ON ts.taskid = t.taskid    "
			+ "						         JOIN tms_project p ON t.pid = p.pid    "
			+ "						         WHERE    p.admin_id = :adminId  AND p.pid = :pid AND  ts.priority IN  ('High', 'Low', 'Medium', 'None')   "
			+ "					             GROUP BY ts.priority    "
			+ "						       ),   "
			+ "			   combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.Priority, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.Priority, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 ),   "
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.Priority,   "
			+ "			     COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 )   "
			+ "			    "
			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE priority   "
			+ "			     WHEN 'High' THEN 1   "
			+ "			     WHEN 'Low' THEN 2   "
			+ "			     WHEN 'Medium' THEN 3   "
			+ "			     WHEN 'None' THEN 4   "
			+ "			     ELSE 5 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END;    "
			+ "             ",nativeQuery = true)
	public  List<TmsTaskCountData>   getPriorityByAdminIdAndPid(Long adminId , Long pid);
	
	@Query(value = "WITH priority AS (   "
			+ "			     SELECT 'High' AS Priority   "
			+ "			     UNION ALL SELECT 'Low'   "
			+ "			     UNION ALL SELECT 'Medium'   "
			+ "			     UNION ALL SELECT 'None'   "
			+ "			      "
			+ "			 ),   "
			+ "			 task_counts AS (   "
			+ "					     SELECT t.priority, COUNT(*) AS count  "
			+ "					     FROM tms_task t  "
			+ "					     JOIN tms_project p ON t.pid = p.pid "
			+ "						 LEFT JOIN tms_task_users ttu ON t.taskid = ttu.taskid "
			+ "                      LEFT JOIN tms_assigned_users tau ON tau.assignid = ttu.assignedto "
			+ "                      WHERE t.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "                      AND ( "
			+ "                           (p.addedby = :userId AND (p.addedby = :userId OR tau.tms_user_id = :userId))   "
			+ "                           OR (p.addedby <> :userId AND tau.tms_user_id = :userId)                         "
			+ "                          ) AND p.pid = :pid "
			+ "					     GROUP BY t.priority   "
			+ "					 ),   "
			+ "			 "
			+ "					 sub_task_counts AS (    "
			+ "				        SELECT ts.priority, COUNT(*) AS count    "
			+ "					    FROM tms_sub_task ts    "
			+ "					    JOIN tms_task t ON ts.taskid = t.taskid "
			+ "                     JOIN tms_project p ON t.pid = p.pid "
			+ "                     LEFT JOIN tms_assigned_users tau ON tau.subtaskid = ts.subtaskid "
			+ "                     WHERE ts.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "                      AND ( "
			+ "                         (p.addedby = :userId AND (p.addedby = :userId OR tau.tms_user_id = :userId)) "
			+ "                         OR (p.addedby <> :userId AND tau.tms_user_id = :userId) "
			+ "                          ) AND p.pid = :pid "
			+ "					     GROUP BY ts.priority     "
			+ "						 ),   "
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.Priority, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.Priority, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 ),   "
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.Priority,   "
			+ "			      COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 )   "
			+ "			    "
			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE priority   "
			+ "			     WHEN 'High' THEN 1   "
			+ "			     WHEN 'Low' THEN 2   "
			+ "			     WHEN 'Medium' THEN 3   "
			+ "			     WHEN 'None' THEN 4   "
			+ "			     ELSE 5 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END;",nativeQuery = true)
	public  List<TmsTaskCountData>   getPriorityByUserIdAndpid(Long userId, Long pid);
	
	@Query(value = "WITH priority AS (   "
			+ "			     SELECT 'High' AS Priority   "
			+ "			     UNION ALL SELECT 'Low'   "
			+ "			     UNION ALL SELECT 'Medium'   "
			+ "			     UNION ALL SELECT 'None'   "
			+ "			      "
			+ "			 ),   "
			+ "	              task_counts AS ( "
			+ "                        SELECT t.priority, COUNT(*) AS count "
			+ "                        FROM tms_task t "
			+ "                        JOIN tms_project p ON t.pid = p.pid "
			+ "                        WHERE  p.admin_id = :adminId  "
			+ "                        AND  (:pid IS NULL OR p.pid = :pid) "
			+ "                        AND t.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "			               AND (    "
			+ "			                ( :intervel = 'daily' AND DATE(t.updateddate) = CURDATE()) OR    "
			+ "			                ( :intervel = 'weekly' AND t.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :intervel = 'monthly' AND t.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR  "
			+ "                         ( :intervel = 'yearly' AND t.updateddate >= CURDATE() - INTERVAL 1 YEAR) OR "
			+ "			                ( :intervel = 'all')    "
			+ "			              )    "
			+ "			            GROUP BY t.priority    "
			+ "			        ),    "
			+ "                     "
			+ "			 "
			+ "				sub_task_counts AS ( "
			+ "                        SELECT ts.priority, COUNT(*) AS count "
			+ "                        FROM tms_sub_task ts "
			+ "                        JOIN tms_task t ON ts.taskid = t.taskid "
			+ "                        JOIN tms_project p ON t.pid = p.pid "
			+ "                        WHERE  p.admin_id = :adminId   "
			+ "                        AND (:pid IS NULL OR p.pid = :pid)"
			+ "                        AND ts.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "			                AND (    "
			+ "			                ( :intervel = 'daily' AND DATE(ts.updateddate) = CURDATE()) OR    "
			+ "			                ( :intervel = 'weekly' AND ts.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :intervel = 'monthly' AND ts.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR    "
			+ "							( :intervel = 'yearly' AND ts.updateddate >= CURDATE() - INTERVAL 1 YEAR) OR "
			+ "			                ( :intervel = 'all')    "
			+ "			              )    "
			+ "			            GROUP BY ts.priority    "
			+ "			        ),    "
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.Priority, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.Priority, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 ),   "
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.Priority,   "
			+ "			     COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 )   "
			+ "			    "
			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE priority   "
			+ "			     WHEN 'High' THEN 1   "
			+ "			     WHEN 'Low' THEN 2   "
			+ "			     WHEN 'Medium' THEN 3   "
			+ "			     WHEN 'None' THEN 4   "
			+ "			     ELSE 5 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END;",nativeQuery = true)
	public  List<TmsTaskCountData>   getPriorityByAdminIdAndPidAndTime(Long adminId,Long pid,String intervel);
	
	@Query(value = "WITH priority AS (   "
			+ "			     SELECT 'High' AS Priority   "
			+ "			     UNION ALL SELECT 'Low'   "
			+ "			     UNION ALL SELECT 'Medium'   "
			+ "			     UNION ALL SELECT 'None'   "
			+ "			      "
			+ "			 ),   "
			+ "	               task_counts AS ( "
			+ "                        SELECT t.priority, COUNT(*) AS count "
			+ "                        FROM tms_task t "
			+ "                        JOIN tms_project p ON t.pid = p.pid "
			+ "                        LEFT JOIN tms_task_users ttu ON t.taskid = ttu.taskid "
			+ "                        LEFT JOIN tms_assigned_users tau ON tau.assignid = ttu.assignedto "
			+ "                        WHERE t.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "                        AND ( "
			+ "                            (p.addedby = :userId AND (p.addedby = :userId  OR tau.tms_user_id = :userId ))   "
			+ "                            OR (p.addedby <> :userId  AND tau.tms_user_id = :userId)                         "
			+ "                            ) AND (:pid IS NULL OR p.pid = :pid) "
			+ "			               AND (    "
			+ "			                ( :intervel = 'daily' AND DATE(t.updateddate) = CURDATE()) OR    "
			+ "			                ( :intervel = 'weekly' AND t.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :intervel = 'monthly' AND t.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR  "
			+ "                         ( :intervel = 'yearly' AND t.updateddate >= CURDATE() - INTERVAL 1 YEAR) OR "
			+ "			                ( :intervel = 'all')    "
			+ "			              )    "
			+ "			            GROUP BY t.priority    "
			+ "			        ),    "
			+ "                     "
			+ "			 "
			+ "				   sub_task_counts AS ( "
			+ "                      SELECT ts.priority, COUNT(*) AS count "
			+ "                      FROM tms_sub_task ts "
			+ "                      JOIN tms_task t ON ts.taskid = t.taskid "
			+ "                      JOIN tms_project p ON t.pid = p.pid "
			+ "                      LEFT JOIN tms_assigned_users tau ON tau.subtaskid = ts.subtaskid "
			+ "                      WHERE ts.priority IN ('High', 'Low', 'Medium', 'None') "
			+ "                      AND ( "
			+ "                          (p.addedby = :userId AND (p.addedby =  :userId  OR tau.tms_user_id = :userId)) "
			+ "                          OR (p.addedby <> :userId  AND tau.tms_user_id = :userId ) "
			+ "                          ) AND (:pid IS NULL OR p.pid = :pid) "
			+ "			             AND (    "
			+ "			                ( :intervel = 'daily' AND DATE(ts.updateddate) = CURDATE()) OR    "
			+ "			                ( :intervel = 'weekly' AND ts.updateddate >= CURDATE() - INTERVAL 7 DAY) OR    "
			+ "			                ( :intervel = 'monthly' AND ts.updateddate >= CURDATE() - INTERVAL 1 MONTH) OR    "
			+ "							( :intervel = 'yearly' AND ts.updateddate >= CURDATE() - INTERVAL 1 YEAR) OR "
			+ "			                ( :intervel = 'all')    "
			+ "			              )    "
			+ "			            GROUP BY ts.priority    "
			+ "			        ),    "
			+ "			 combined_counts AS (   "
			+ "			     SELECT 'Task' AS type, s.Priority, COALESCE(tc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			    "
			+ "			     UNION ALL   "
			+ "			    "
			+ "			     SELECT 'Sub Task' AS type, s.Priority, COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 ),   "
			+ "			 total_counts AS (   "
			+ "			     SELECT 'Total' AS type, s.Priority,   "
			+ "			     COALESCE(tc.count, 0) + COALESCE(stc.count, 0) AS count   "
			+ "			     FROM priority s   "
			+ "			     LEFT JOIN task_counts tc ON s.Priority = tc.Priority   "
			+ "			     LEFT JOIN sub_task_counts stc ON s.Priority = stc.Priority   "
			+ "			 )   "
			+ "			    "
			+ "			 SELECT * FROM combined_counts   "
			+ "			 UNION ALL   "
			+ "			 SELECT * FROM total_counts   "
			+ "			 ORDER BY    "
			+ "			   CASE priority   "
			+ "			     WHEN 'High' THEN 1   "
			+ "			     WHEN 'Low' THEN 2   "
			+ "			     WHEN 'Medium' THEN 3   "
			+ "			     WHEN 'None' THEN 4   "
			+ "			     ELSE 5 "
			+ "			   END,   "
			+ "			   CASE type   "
			+ "			     WHEN 'Task' THEN 1   "
			+ "			     WHEN 'Sub Task' THEN 2   "
			+ "			     WHEN 'Total' THEN 3   "
			+ "			     ELSE 4   "
			+ "			   END;",nativeQuery = true)
	public  List<TmsTaskCountData>   getPriorityByuserIdAndPidAndTime(Long userId,Long pid, String intervel);
	
}
